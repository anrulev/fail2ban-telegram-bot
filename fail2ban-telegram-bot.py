#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import re
import logging
import subprocess
import configparser
import socket
from datetime import datetime
import shutil
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def _init_logger() -> logging.Logger:
    log_file = os.environ.get('BOT_LOG_FILE', '/app/logs/fail2ban_bot.log')
    try:
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
    except Exception:
        log_file = os.path.basename(log_file)
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        filename=log_file
    )
    return logging.getLogger(__name__)

logger = _init_logger()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
class Config:
    def __init__(self, config_file='config.ini'):
        self.config = configparser.ConfigParser()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        telegram_chat_id = os.environ.get('TELEGRAM_CHAT_ID')
        fail2ban_log = os.environ.get('FAIL2BAN_LOG_FILE', '/var/log/fail2ban.log')
        check_interval = os.environ.get('CHECK_INTERVAL', '60')
        max_alerts = os.environ.get('MAX_ALERTS_PER_RUN', '10')
        hostname = os.environ.get('HOSTNAME') or socket.gethostname()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if telegram_token and telegram_chat_id:
            self.config['Telegram'] = {
                'BOT_TOKEN': telegram_token,
                'CHAT_ID': telegram_chat_id
            }
            
            self.config['Fail2Ban'] = {
                'LOG_FILE': fail2ban_log,
                'CHECK_INTERVAL': check_interval,
                'MAX_ALERTS_PER_RUN': max_alerts,
                'HOSTNAME': hostname
            }
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        # –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        elif os.path.exists(config_file):
            self.config.read(config_file)
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {config_file}")
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        else:
            self.config['Telegram'] = {
                'BOT_TOKEN': 'YOUR_TELEGRAM_BOT_TOKEN',
                'CHAT_ID': 'YOUR_CHAT_ID'
            }
            
            self.config['Fail2Ban'] = {
                'LOG_FILE': '/var/log/fail2ban.log',
                'CHECK_INTERVAL': '60',  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'MAX_ALERTS_PER_RUN': '10',
                'HOSTNAME': socket.gethostname()
            }
            
            with open(config_file, 'w') as f:
                self.config.write(f)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    
    def get(self, section, key):
        return self.config.get(section, key)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Fail2Ban
class Fail2BanMonitor:
    def __init__(self, config):
        self.config = config
        self.log_file = config.get('Fail2Ban', 'LOG_FILE')
        self.check_interval = int(config.get('Fail2Ban', 'CHECK_INTERVAL'))
        self.max_alerts = int(config.get('Fail2Ban', 'MAX_ALERTS_PER_RUN'))
        self.last_position = 0
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫ Fail2Ban
        self.ban_pattern = re.compile(
            r'^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d+)\s+'
            r'\S+\s+\[\d+\]:?\s+'
            r'(?P<level>[A-Z]+)\s+\[(?P<jail>[^\]]+)\]\s+'
            r'Ban\s+(?P<ip>[0-9a-fA-F\.:]+)'
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ
        self._init_file_position()
    
    def _init_file_position(self):
        if os.path.exists(self.log_file):
            self.last_position = os.path.getsize(self.log_file)
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –ª–æ–≥–µ: {self.last_position}")
        else:
            logger.error(f"–§–∞–π–ª –ª–æ–≥–∞ {self.log_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    def get_new_bans(self):
        bans = []
        
        try:
            if not os.path.exists(self.log_file):
                logger.error(f"–§–∞–π–ª –ª–æ–≥–∞ {self.log_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return bans
            
            current_size = os.path.getsize(self.log_file)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤)
            if current_size < self.last_position:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                self.last_position = 0
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if current_size > self.last_position:
                with open(self.log_file, 'r') as f:
                    f.seek(self.last_position)
                    new_lines = f.readlines()
                    self.last_position = f.tell()
                
                count = 0
                for line in new_lines:
                    match = self.ban_pattern.search(line)
                    if match and count < self.max_alerts:
                        groups = match.groupdict()
                        bans.append({
                            'timestamp': groups.get('timestamp'),
                            'level': groups.get('level'),
                            'jail': groups.get('jail'),
                            'ip': groups.get('ip')
                        })
                        count += 1
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
        
        return bans
    
    def get_jail_status(self):
        try:
            if shutil.which('fail2ban-client') is None:
                return "–ö–æ–º–∞–Ω–¥–∞ fail2ban-client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
            result = subprocess.run(['fail2ban-client', 'status'], capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fail2ban-client: {result.stderr}")
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Fail2Ban"
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fail2ban-client: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def get_jail_details(self, jail_name):
        try:
            if shutil.which('fail2ban-client') is None:
                return "–ö–æ–º–∞–Ω–¥–∞ fail2ban-client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
            result = subprocess.run(['fail2ban-client', 'status', jail_name], capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fail2ban-client –¥–ª—è —Ç—é—Ä—å–º—ã {jail_name}: {result.stderr}")
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—é—Ä—å–º–µ {jail_name}"
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fail2ban-client –¥–ª—è —Ç—é—Ä—å–º—ã {jail_name}: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
class TelegramBot:
    def __init__(self, config):
        self.config = config
        self.token = config.get('Telegram', 'BOT_TOKEN')
        self.chat_id = config.get('Telegram', 'CHAT_ID')
        self.bot = telebot.TeleBot(self.token)
        self.fail2ban = Fail2BanMonitor(config)
        # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, —Ç—Ä–µ–±—É—é—â–∏—Ö fail2ban-client
        env_flag = os.environ.get('ENABLE_FAIL2BAN_STATUS')
        file_flag = None
        try:
            if config.config.has_section('Fail2Ban'):
                file_flag = config.config.get('Fail2Ban', 'ENABLE_FAIL2BAN_STATUS', fallback='false')
        except Exception:
            file_flag = 'false'
        value = env_flag if env_flag is not None else file_flag or 'false'
        self.enable_status_commands = str(value).strip().lower() in ('1', 'true', 'yes')
        self._setup_handlers()
    
    def _setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Fail2Ban.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å Fail2Ban\n"
                "/jails - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—é—Ä–µ–º\n"
                "/latest - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            self.bot.reply_to(message, welcome_text)
        
        if self.enable_status_commands and shutil.which('fail2ban-client') is not None:
            @self.bot.message_handler(commands=['status'])
            def send_status(message):
                status = self.fail2ban.get_jail_status()
                self.bot.reply_to(message, f"–°—Ç–∞—Ç—É—Å Fail2Ban:\n```\n{status}\n```", parse_mode='Markdown')

            @self.bot.message_handler(commands=['jails'])
            def send_jails(message):
                status = self.fail2ban.get_jail_status()
                jails = []

                for line in status.split('\n'):
                    if 'Jail list:' in line:
                        jail_list = line.split('Jail list:')[1].strip()
                        jails = [jail.strip() for jail in jail_list.split(',')]
                        break

                if not jails:
                    self.bot.reply_to(message, "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—é—Ä—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return

                markup = types.InlineKeyboardMarkup(row_width=2)
                buttons = [
                    types.InlineKeyboardButton(jail, callback_data=f"jail_{jail}")
                    for jail in jails
                ]
                markup.add(*buttons)
                self.bot.reply_to(
                    message,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—é—Ä—å–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                    reply_markup=markup
                )

            @self.bot.callback_query_handler(func=lambda call: call.data.startswith('jail_'))
            def jail_callback(call):
                jail_name = call.data.split('jail_')[1]
                jail_info = self.fail2ban.get_jail_details(jail_name)
                self.bot.send_message(
                    call.message.chat.id,
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—é—Ä—å–º–µ {jail_name}:\n```\n{jail_info}\n```",
                    parse_mode='Markdown'
                )
                self.bot.answer_callback_query(call.id)
        else:
            @self.bot.message_handler(commands=['status', 'jails'])
            def not_available(message):
                self.bot.reply_to(
                    message,
                    "–ö–æ–º–∞–Ω–¥—ã /status –∏ /jails –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –í–∫–ª—é—á–∏—Ç–µ ENABLE_FAIL2BAN_STATUS –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ fail2ban-client –Ω–∞ —Ö–æ—Å—Ç–µ/–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ."
                )
        
        @self.bot.message_handler(commands=['latest'])
        def send_latest_bans(message):
            bans = self.fail2ban.get_new_bans()
            if bans:
                response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n"
                for ban in bans:
                    response += (
                        f"‚è∞ {ban['timestamp']}\n"
                        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {self.config.get('Fail2Ban', 'HOSTNAME')}\n"
                        f"üîí –¢—é—Ä—å–º–∞: {ban['jail']}\n"
                        f"üî¥ IP: {ban['ip']}\n\n"
                    )
                self.bot.reply_to(message, response)
            else:
                self.bot.reply_to(message, "–ù–æ–≤—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    def send_notification(self, ban):
        hostname = self.config.get('Fail2Ban', 'HOSTNAME')
        message = (
            f"üö® *–ù–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ Fail2Ban*\n\n"
            f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {hostname}\n"
            f"‚è∞ –í—Ä–µ–º—è: {ban['timestamp']}\n"
            f"üîí –¢—é—Ä—å–º–∞: {ban['jail']}\n"
            f"üî¥ IP-–∞–¥—Ä–µ—Å: {ban['ip']}"
        )
        
        try:
            self.bot.send_message(self.chat_id, message, parse_mode='Markdown')
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP {ban['ip']} –≤ —Ç—é—Ä—å–º–µ {ban['jail']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def start_monitoring(self):
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Fail2Ban")
        
        while True:
            try:
                bans = self.fail2ban.get_new_bans()
                for ban in bans:
                    self.send_notification(ban)
                
                time.sleep(self.fail2ban.check_interval)
            
            except KeyboardInterrupt:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    
    def run(self):
        from threading import Thread
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = Thread(target=self.start_monitoring)
        monitor_thread.daemon = True
        monitor_thread.start()
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
        self.bot.infinity_polling()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        config = Config()
        bot = TelegramBot(config)
        bot.run()
    
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)

if __name__ == "__main__":
    main()
